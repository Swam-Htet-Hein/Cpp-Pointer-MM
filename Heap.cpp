#include<iostream>
using namespace std;

int main() {
    // int a = 5; stack (local variable)
    // int *ptr = &a; အခြား memory ပေါ်မှာ မှီခိုမှုပြုနေတဲ့ pointer
    // ကိုယ်ပိုင် memory ပေါ်မှာ ပဲ သိမ်းချင်ရင် ကိုယ်ဘာသာကိုယ် memory နေရာလွတ်တစ်ခုတောင်းဆိုလိုက်။
    // အဲဒီတောင်းဆိုထားတဲ့ နေရာလွတ် memory သည် free memory(heap) မှာ store လုပ်သည်။
    int * ptr = new int; // heap (free memory)

    *ptr = 5000; // တောင်းဆိုထားတဲ့ ဘယ် variable မှ ပိုင်ဆိုင်မှုမရှိတဲ့ နေရာလွတ်တစ်ခု မှာ value ကို ကိုယ်ကြိုက် သလိုပေးလို့ရတယ်။

    cout << "address ptr : " << ptr << endl;
    cout << "value ptr : " << *ptr << endl;

    // program အဆုံးသတ်သွားတဲ့ အခါမှာ pointer ဟာ heap memory ကိုအဆက်ပြတ်လိုက်တယ်။
    // pointer ကတော့ အဆက်ပြတ်လိုက်ပေမဲ့ operating system ကတော့ ဒီ pointer ဟာဆက်သုံးနေသေးတယ်လို့ အထင်မှားပြီး heap memory ထဲမှာ ဒီ pointer နဲ့ ပတ်သက်တဲ့ address တွေ value တွေကို ဆက်သိမ်းထားလိုက်တယ်။
    // သိမ်းထားပြီး တခြားအသစ်အသစ်တွေ လာရင်လည်း နေရာမပေးတော့ပါဘူး။ အဲလို့ သိမ်းလည်းသိမ်းထားပြီး ပြန်သုံးလို့ လည်းမရတော့ တဲ့ နေရာလွတ်တွေကို leak memory တွေလို့ခေါ်တယ်။
    // အဲဒီတော့ သေးငယ်တဲ့ program တွေမှာ မသိသာပေမဲ့ ကြီးမှားတဲ့ program တွေမှာ တော့ သိသာလာပါတယ်။
    // နောက်ဆုံး heap memory ပြည့်သွားပြီး ဆက်ယူသုံးလို့ မရတော့တဲ့ အထိဖြစ်လာနိုင်ပါတယ်။
    // ဒါ့ကြောင့် pointer ကို သုံးပြီး ရင် ကိုယ်တိုင် ပြန်ဖျက်ဖို့လိုပါတယ်။
    delete ptr; // အခုနောက်ပိုင်း OS တွေမှာတော့ ဒီပြဿနာကို ဖြေရှင်းနိုင်တဲ့ နည်းပညာတွေပါလာပါပြီ။ ဒါပေမဲ့ ဒီလိုဆက်သုံးပေးနေရင်တော့ ကောင်းဆုံးပဲ။

    // အကယ်၍ ကိုယ်က pointer ကိုဆက်သုံးချင်သေးတယ်ဆိုရင် ptr = new int; ဆိုပြီး အသစ်ပြန်ခေါ်လိုက်ရုံပဲ။

    return 0;
}